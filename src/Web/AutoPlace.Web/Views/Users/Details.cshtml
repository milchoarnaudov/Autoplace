@model UserDetailsViewModel

<div class="container w-100">
    <div class="d-flex justify-content-between">
        <h1>@Model.Username</h1>
        <div class="votes-container d-flex justify-content-between">
            <div>
                <i id="upVote" class="fa fa-2x fa-thumbs-o-up"></i>
                <span id="upVotesCount"class="votes-value">@Model.PositiveVotes</span>
            </div>
            <div class="stroke" ></div>
            <div>
                <span id="downVotesCount" class="votes-value">@Model.NegativeVotes</span>
                <i id="downVote" class="fa fa-2x fa-thumbs-o-down"></i>
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-between">
        <span>Join Date @Model.CreatedOn.ToString("dd/MM/yyyy")</span>
        <br />
    </div>
    <hr />
    <div class="d-flex justify-content-between">
        <div>
            @foreach (var autopart in Model.Autoparts)
            {
                <div class="card" style="margin:5px">
                    <img class="card-img-top" src="@autopart.ImageUrl" style="width: 15rem; height: 200px; image-rendering: auto" />
                    <div class="card-body text-lg-center">
                        <h3 class="card-title">@autopart.Name</h3>
                        <h4 class="card-title">@autopart.Price</h4>
                        <p class="card-text">@autopart.Description</p>
                        <a class="btn btn-primary w-100" asp-controller="Autoparts" asp-action="Details" asp-route-id="@autopart.Id">View</a>
                    </div>
                </div>
            }
        </div>
        <div>
            @foreach (var comment in Model.CommentsForUser)
            {
                <div class="card w-75">
                    <div class="card-body">
                        <h5 class="card-title">@comment.CommentatorUsername</h5>
                        <p class="card-subtitle">@comment.CreatedOn</p>
                        <p class="card-text">@comment.Content</p>
                    </div>
                </div>
            }
        </div>
    </div>
    <div>
        <div class="form-group">
            <label class="col-form-label">Comment</label>
            <input id="commentContent" class="form-check-input" />
        </div>
        <button id="commentSubmitBtn" class="btn btn-primary">Submit</button>
    </div>
    <hr />
</div>

@section Scripts{
    <script>
        function gettoken() {
            var token = '@Html.AntiForgeryToken()';
            token = $(token).val();
            return token;
        }

        function getVotes() {
            fetch(`/api/Votes?username=${'@Model.Username'}`)
                .then((response) => {
                    return response.json();
                })
                .then((data) => {
                    let upVoteElement = document.getElementById("upVotesCount");
                    let downVoteElement = document.getElementById("downVotesCount");

                    upVoteElement.innerText = data.filter(x => x.voteValue).length;
                    downVoteElement.innerText = data.filter(x => !x.voteValue).length;
                });
        }

        document.getElementById("commentSubmitBtn").addEventListener('click', function (e) {
            var content = document.getElementById("commentContent").value;
            console.log(content);

             fetch(`/api/Comments/`,
                {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'RequestVerificationToken': gettoken()
                    },
                    body: JSON.stringify({ CommentedUserUserName: '@Model.Username', content: content })
                 })
                .then((response) => {
                    return response.text();
                })
                .then((result) => {
                    console.log(result);
                });
        });

        document.getElementById("downVote").addEventListener('click', function (e) {
            changeBtnColors(e.target, false);

            fetch(`/api/Votes/`,
                {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'RequestVerificationToken': gettoken()
                    },
                    body: JSON.stringify({ ForUserUserName: '@Model.Username', VoteValue: false })
                 })
                .then((response) => {
                    return response.text();
                })
                .then((data) => {
                    getVotes();
                });
        });

        document.getElementById("upVote").addEventListener('click', function (e) {
            changeBtnColors(e.target, true);

             fetch(`/api/Votes/`,
                {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'RequestVerificationToken': gettoken()
                    },
                    body: JSON.stringify({ ForUserUserName: '@Model.Username', VoteValue: true })
                 })
                .then((response) => {
                    return response.text();
                })
                .then((result) => {
                    fetch(`/api/Votes/`)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            getVotes();
                        });
                });
        });

        function changeBtnColors(target, voteType) {
            const upVote = document.getElementById("upVote");
            const downVote = document.getElementById("downVote");
            const upVoteBtnColor = "votes-positive-btn";
            const downVoteBtnClass = "votes-negative-btn";


            function clearBtnsColors() {
                upVote.className = upVote.className.replace(upVoteBtnColor, "");
                downVote.className = downVote.className.replace(downVoteBtnClass, "");
            }

            if (downVote.className.includes(downVoteBtnClass) || upVote.className.includes(upVoteBtnColor)) {
                let oneOftheBtnsPressed = false;

                if (!target.className.includes(upVoteBtnColor) && !target.className.includes(downVoteBtnClass)) {
                    oneOftheBtnsPressed = true;
                }

                clearBtnsColors();

                if (oneOftheBtnsPressed) {
                    target.className = `${target.className} ${voteType ? upVoteBtnColor : downVoteBtnClass}`;
                }
            }
            else {
                target.className = `${target.className} ${voteType ? upVoteBtnColor : downVoteBtnClass}`;
            }
        }
    </script>
}
