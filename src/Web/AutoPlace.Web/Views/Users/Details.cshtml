@model UserDetailsViewModel

@{
    this.ViewData["Title"] = "Details";
}


<div class="container w-100 user-details-sections-wrapper">
    <div class="row d-flex justify-content-between">
        <h1>@Model.Username</h1>
        <div class="votes-container d-flex justify-content-between">
            <div>
                <i @if (this.User.Identity.IsAuthenticated) { <text> id="upVote" </text> } class="far fa-thumbs-up fa-2x  @if (Model.IsCurrentUserVotedPositive) { <text>votes-positive-btn</text>}"></i>
                <span id="upVotesCount" class="votes-value">@Model.PositiveVotes</span>
            </div>
            <div class="stroke"></div>
            <div>
                <span id="downVotesCount" class="votes-value">@Model.NegativeVotes</span>
                <i @if (this.User.Identity.IsAuthenticated) { <text> id="downVote" </text> } class="far fa-thumbs-down fa-2x @if (Model.IsCurrentUserVotedNegative) { <text>votes-negative-btn</text>}"></i>
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-between">
        <span>Join Date @Model.CreatedOn.ToString("dd/MM/yyyy")</span>
        <br />
    </div>

    <hr />
    <br />

    <div class="d-flex justify-content-around">
        @if (this.User.Identity.Name == Model.Username)
        {
            <h2>My auto parts:</h2>
            <h2>Comments for me:</h2>
        }
        else
        {
            <h2>Added Autoparts:</h2>
            <h2>Comments For User:</h2>
        }
    </div>

    <br />

    <div class="d-flex justify-content-between">
        <div class="col-6 user-details-section bg-light rounded">
            <div class="d-flex justify-content-between row border border-light rounded user-details-section-items w-100 h-100">
                @foreach (var autopart in Model.Autoparts)
                {
                    <partial name="_AutopartPartial" model="autopart" />
                }
            </div>
        </div>
        
        <div class="col-5 border-light bg-light user-details-section rounded">
            <div class="user-details-section-items h-75">
                @foreach (var comment in Model.CommentsForUser)
                {
                    <partial name="_CommentPartial" model="comment" />
                }
            </div>
            <br />
            @if (this.User.Identity.IsAuthenticated)
            {
                <div class="bg-light add-comment-section">
                    <div class="text-center">
                        <textarea placeholder="Leave a comment..." id="commentContent" class="w-100 comment-content border rounded"></textarea>
                    </div>
                    <div class="text-center">
                        <button id="commentSubmitBtn" class="btn btn-primary w-100">Submit</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts{
    <script>
        function getToken() {
            var token = '@Html.AntiForgeryToken()';
            token = $(token).val();
            return token;
        }

        let token = getToken();
        let username = "@Model.Username";

        function getVotes() {
            fetch(`/api/Votes?username=${username}`)
                .then((response) => {
                    return response.json();
                })
                .then((data) => {
                    let upVoteElement = document.getElementById("upVotesCount");
                    let downVoteElement = document.getElementById("downVotesCount");

                    upVoteElement.innerText = data.filter(x => x.voteValue).length;
                    downVoteElement.innerText = data.filter(x => !x.voteValue).length;
                });
        }

        document.getElementById("commentSubmitBtn").addEventListener('click', function (e) {
            var content = document.getElementById("commentContent").value;

            fetch(`/api/Comments/`,
                {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ CommentedUserUserName: `${username}`, content: content })
                })
                .then((response) => {
                    if (response.ok) {
                        location.reload();
                    }
                })
        });

        document.getElementById("downVote").addEventListener('click', function (e) {
            changeBtnColors(e.target, false);

            fetch(`/api/Votes/`,
                {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ ForUserUserName: `${username}`, VoteValue: false })
                })
                .then((data) => {
                    getVotes();
                });
        });

        document.getElementById("upVote").addEventListener('click', function (e) {
            changeBtnColors(e.target, true);

            fetch(`/api/Votes/`,
                {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json;charset=UTF-8',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ ForUserUserName: `${username}`, VoteValue: true })
                })
                .then((response) => {
                    return response.text();
                })
                .then((result) => {
                    fetch(`/api/Votes/`)
                        .then((response) => {
                            getVotes();
                        })
                });
        });

        function changeBtnColors(target, voteType) {
            const upVote = document.getElementById("upVote");
            const downVote = document.getElementById("downVote");
            const upVoteBtnColor = "votes-positive-btn";
            const downVoteBtnClass = "votes-negative-btn";


            function clearBtnsColors() {
                upVote.className = upVote.className.replace(upVoteBtnColor, "");
                downVote.className = downVote.className.replace(downVoteBtnClass, "");
            }

            if (downVote.className.includes(downVoteBtnClass) || upVote.className.includes(upVoteBtnColor)) {
                let oneOftheBtnsPressed = false;

                if (!target.className.includes(upVoteBtnColor) && !target.className.includes(downVoteBtnClass)) {
                    oneOftheBtnsPressed = true;
                }

                clearBtnsColors();

                if (oneOftheBtnsPressed) {
                    target.className = `${target.className} ${voteType ? upVoteBtnColor : downVoteBtnClass}`;
                }
            }
            else {
                target.className = `${target.className} ${voteType ? upVoteBtnColor : downVoteBtnClass}`;
            }
        }
    </script>
}
